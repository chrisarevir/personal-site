{"version":3,"sources":["assets/forest-background.jpg","components/Forest.tsx","components/Gradient.tsx","components/Navigation.tsx","utils/serviceWorker.ts","index.tsx"],"names":["BackgroundImage","styled","img","Forest","src","forest","alt","Gradient","div","Navigation","nav","Boolean","window","location","hostname","match","Link","NavLink","ProfileCard","React","lazy","then","module","default","AboutCard","Projects","Blog","Site","exact","to","Suspense","fallback","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0NAAe,MAA0B,8C,sKCIzC,IAAMA,EAAkBC,IAAOC,IAAV,KAQRC,EAAmB,WAC9B,OAAO,cAACH,EAAD,CAAiBI,IAAKC,EAAQC,IAAI,Y,kOCXpC,IAAMC,EAAWN,IAAOO,IAAV,K,gaCAd,IAAMC,EAAaR,IAAOS,IAAV,K,MCUHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kQCRN,IAAMC,EAAOf,YAAOgB,IAAPhB,CAAH,KAgBJiB,EAAcC,IAAMC,MAAK,kBAC7B,6BAAmCC,MAAK,SAACC,GAAD,MAAa,CACnDC,QAASD,EAAOJ,mBAIdM,EAAYL,IAAMC,MAAK,kBAC3B,6BAAiCC,MAAK,SAACC,GAAD,MAAa,CACjDC,QAASD,EAAOE,iBAIdC,EAAWN,IAAMC,MAAK,kBAC1B,6BAA2BC,MAAK,SAACC,GAAD,MAAa,CAC3CC,QAASD,EAAOG,gBAIdC,EAAOP,IAAMC,MAAK,kBACtB,6BAAuBC,MAAK,SAACC,GAAD,MAAa,CACvCC,QAASD,EAAOI,YAIdC,EAAO,WACX,OACE,eAAC,IAAD,WACE,eAAClB,EAAD,WACE,cAACO,EAAD,CAAMY,OAAK,EAACC,GAAG,IAAf,kBAGA,cAACb,EAAD,CAAMY,OAAK,EAACC,GAAG,SAAf,mBAGA,cAACb,EAAD,CAAMa,GAAG,YAAT,yBAKF,cAAC,EAAD,IACA,cAACtB,EAAD,IAEA,cAAC,IAAMuB,SAAP,CAAgBC,SAAU,GAA1B,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOH,OAAK,EAACI,KAAK,IAAIC,UAAWf,IACjC,cAAC,IAAD,CAAOU,OAAK,EAACI,KAAK,SAASC,UAAWT,IAFxC,IAGE,cAAC,IAAD,CAAOQ,KAAK,YAAYC,UAAWR,IACnC,cAAC,IAAD,CAAOO,KAAK,QAAQC,UAAWP,aAOzCQ,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,SDwD5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAACoB,GAClCA,EAAaC,kB","file":"static/js/main.30af1e0b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/forest-background.4551cdf1.jpg\";","import React from 'react';\nimport styled from 'styled-components';\nimport forest from '../assets/forest-background.jpg';\n\nconst BackgroundImage = styled.img`\n  height: 100vh;\n  width: 100vw;\n  object-fit: cover;\n  position: absolute;\n  z-index: 0;\n`;\n\nexport const Forest: React.FC = () => {\n  return <BackgroundImage src={forest} alt=\"forest\" />;\n};\n","import styled from 'styled-components';\n\nexport const Gradient = styled.div`\n  background: linear-gradient(90deg, #fc466b 0%, #3f5efb 100%);\n  height: 100vh;\n  opacity: 0.2;\n  width: 100vw;\n  position: absolute;\n  z-index: 1;\n`;\n","import styled from 'styled-components';\n\nexport const Navigation = styled.nav`\n  align-items: center;\n  justify-content: flex-start;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  display: flex;\n  height: 3em;\n  position: absolute;\n  width: 100vw;\n  z-index: 3;\n  padding: 0 2em;\n\n  a {\n    color: white;\n  }\n\n  a + a {\n    margin-left: 20px;\n  }\n\n  @media (max-width: 450px) {\n    bottom: 0;\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, NavLink, Route, Switch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Forest } from './components/Forest';\nimport { Gradient } from './components/Gradient';\nimport { Navigation } from './components/Navigation';\nimport './styles/reset.css';\nimport * as serviceWorker from './utils/serviceWorker';\n\nconst Link = styled(NavLink)`\n  text-decoration: none;\n\n  &:hover {\n    text-decoration: none;\n  }\n\n  &.active {\n    text-decoration: underline;\n\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst ProfileCard = React.lazy(() =>\n  import('./components/ProfileCard').then((module) => ({\n    default: module.ProfileCard,\n  }))\n);\n\nconst AboutCard = React.lazy(() =>\n  import('./components/AboutCard').then((module) => ({\n    default: module.AboutCard,\n  }))\n);\n\nconst Projects = React.lazy(() =>\n  import('./pages/Projects').then((module) => ({\n    default: module.Projects,\n  }))\n);\n\nconst Blog = React.lazy(() =>\n  import('./pages/Blog').then((module) => ({\n    default: module.Blog,\n  }))\n);\n\nconst Site = () => {\n  return (\n    <Router>\n      <Navigation>\n        <Link exact to=\"/\">\n          Home\n        </Link>\n        <Link exact to=\"/about\">\n          About\n        </Link>\n        <Link to=\"/projects\">Projects</Link>\n        {/* TODO: Actually write an article here and unhide this */}\n        {/* <Link to=\"/blog\">Blahg</Link> */}\n      </Navigation>\n\n      <Forest />\n      <Gradient />\n\n      <React.Suspense fallback={''}>\n        <Switch>\n          <Route exact path=\"/\" component={ProfileCard} />\n          <Route exact path=\"/about\" component={AboutCard} />=\n          <Route path=\"/projects\" component={Projects} />\n          <Route path=\"/blog\" component={Blog} />\n        </Switch>\n      </React.Suspense>\n    </Router>\n  );\n};\n\nReactDOM.render(<Site />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}